// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Bootstrapper.cs" company="TwitchExploit">
//     Copyright (c) TwitchExploit. All rights reserved.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------
namespace TwitchExploit.Core
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.Composition;
    using System.Linq;
    using System.Reflection;
    using System.Security;

    using LeagueSharp;
    using LeagueSharp.Common;

    using log4net;

    using PlaySharp.Toolkit.EventAggregator;
    using PlaySharp.Toolkit.Logging;

    using TwitchExploit.Wrappers;
    using TwitchExploit.Wrappers.Gapcloser;
    using TwitchExploit.Wrappers.Interrupter;
    using TwitchExploit.Wrappers.ObjectManager;
    using TwitchExploit.Wrappers.Orbwalker;
    using TwitchExploit.Wrappers.Prediction;
    using TwitchExploit.Wrappers.TargetSelector;

    [SecuritySafeCritical]
    public class Bootstrapper : BootstrapperBase<Bootstrapper>, 
                                IHandle<OnConfigure>, 
                                IHandle<OnStartup>, 
                                IHandle<OnStringListChanged>
    {
        private static readonly ILog Log = AssemblyLogs.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);

        [ImportMany(typeof(IChampion))]
        public IEnumerable<Lazy<IChampion, IChampionMetadata>> Champions { get; set; }

        [ImportMany(typeof(IGapcloser))]
        public IEnumerable<Lazy<IGapcloser, IExportWrapperMetadata>> Gapclosers { get; set; }

        [ImportMany(typeof(IInterrupter))]
        public IEnumerable<Lazy<IInterrupter, IExportWrapperMetadata>> Interrupters { get; set; }

        [ImportMany(typeof(IObjectManager))]
        public IEnumerable<Lazy<IObjectManager, IExportWrapperMetadata>> ObjectManagers { get; set; }

        [ImportMany(typeof(IOrbwalker))]
        public IEnumerable<Lazy<IOrbwalker, IExportWrapperMetadata>> Orbwalkers { get; set; }

        [ImportMany(typeof(IPrediction))]
        public IEnumerable<Lazy<IPrediction, IExportWrapperMetadata>> Predictions { get; set; }

        public Menu RootMenu { get; set; }

        [ImportMany(typeof(ITargetSelector))]
        public IEnumerable<Lazy<ITargetSelector, IExportWrapperMetadata>> TargetSelectors { get; set; }

        [SecuritySafeCritical]
        public void Handle(OnConfigure message)
        {
            Log.Debug($"OnConfigure");

            this.RootMenu = new Menu("PlaySharp", "PlaySharp", true);
            this.RootMenu.AddToMainMenu();

            message.Container.ComposeExportedValue("PlaySharp", this.RootMenu);

            Log.Debug($"Building Service Menu's");
            this.BuildServiceMenu(this.Orbwalkers.Select(e => e.Metadata.Target), typeof(IOrbwalker), "Orbwalker");
            this.BuildServiceMenu(this.TargetSelectors.Select(e => e.Metadata.Target), typeof(ITargetSelector), "Target Selector");
            this.BuildServiceMenu(this.ObjectManagers.Select(e => e.Metadata.Target), typeof(IObjectManager), "Object Manager");
            this.BuildServiceMenu(this.Predictions.Select(e => e.Metadata.Target), typeof(IPrediction), "Prediction");
            this.BuildServiceMenu(this.Gapclosers.Select(e => e.Metadata.Target), typeof(IGapcloser), "Gapcloser");
            this.BuildServiceMenu(this.Interrupters.Select(e => e.Metadata.Target), typeof(IInterrupter), "Interrupter");
        }

        [SecuritySafeCritical]
        public void Handle(OnStartup message)
        {
            Log.Debug($"OnStartup");

            foreach (var champion in this.Champions)
            {
                Log.Debug($"Champion: {champion.Metadata.Name}");
                if (champion.Metadata.Name == ObjectManager.Player.ChampionName)
                {
                    Log.Debug($"Activate {champion.Value}");
                    champion.Value.Activate();
                }
            }
        }


        [SecuritySafeCritical]
        public void Handle(OnStringListChanged message)
        {
            if (message.OldValue == message.NewValue)
            {
                return;
            }

            Log.Debug($"{message.Menu.DisplayName} '{message.OldValue}' -> '{message.NewValue}'");

            if (message.OldValue != null)
            {
                var target = this.GetWrapper(message.Menu.Name, message.OldValue);

                if (target != null && target.IsActive)
                {
                    Log.Debug($"Deactivate {target}");
                    target.Deactivate();
                }
            }

            if (message.NewValue != null)
            {
                var target = this.GetWrapper(message.Menu.Name, message.NewValue);

                if (target != null && !target.IsActive)
                {
                    Log.Debug($"Activate {target}");
                    target.Activate();
                }
            }
        }

        [SecuritySafeCritical]
        private void BuildServiceMenu(IEnumerable<TargetFramework> services, Type type, string name)
        {
            var entries = new List<string>();

            foreach (var service in services.OrderBy(e => e))
            {
                Log.Debug($"Register - {service} {type}");
                entries.Add(service.ToString());
            }
            entries.Add(TargetFramework.None.ToString());

            if (entries.Count > 0)
            {
                var value = new StringList(entries.ToArray());
                var menu = new MenuItem(name, name).SetValue(value);

                menu.ValueChanged +=
                    (sender, args) =>
                        {
                            this.EventAggregator.Value.PublishOnCurrentThread(
                                new OnStringListChanged(
                                    menu, 
                                    args.GetOldValue<StringList>().SelectedValue, 
                                    args.GetNewValue<StringList>().SelectedValue));
                        };

                this.RootMenu.SubMenu("Configuration").AddItem(menu);
                this.EventAggregator.Value.PublishOnCurrentThread(new OnStringListChanged(menu, null, menu.GetValue<StringList>().SelectedValue));
            }
        }

        [SecuritySafeCritical]
        private IWrapper GetWrapper(string name, string targetFramework)
        {
            var framework = (TargetFramework)Enum.Parse(typeof(TargetFramework), targetFramework);

            switch (name)
            {
                case "Orbwalker":
                    return this.Orbwalkers.FirstOrDefault(e => e.Metadata.Target == framework)?.Value;

                case "Target Selector":
                    return this.TargetSelectors.FirstOrDefault(e => e.Metadata.Target == framework)?.Value;

                case "Object Manager":
                    return this.ObjectManagers.FirstOrDefault(e => e.Metadata.Target == framework)?.Value;

                case "Prediction":
                    return this.Predictions.FirstOrDefault(e => e.Metadata.Target == framework)?.Value;

                case "Gapcloser":
                    return this.Gapclosers.FirstOrDefault(e => e.Metadata.Target == framework)?.Value;

                case "Interrupter":
                    return this.Interrupters.FirstOrDefault(e => e.Metadata.Target == framework)?.Value;

                default:
                    throw new NotSupportedException($"Wrapper ({name})");
            }
        }
    }
}