// --------------------------------------------------------------------------------------------------------------------
// <copyright file="BootstrapperBase.cs" company="TwitchExploit">
//     Copyright (c) TwitchExploit. All rights reserved.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------
namespace TwitchExploit.Core
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.Composition;
    using System.ComponentModel.Composition.Hosting;
    using System.Linq;
    using System.Reflection;
    using System.Security;

    using JetBrains.Annotations;

    using LeagueSharp;

    using log4net;

    using PlaySharp.Toolkit.EventAggregator;
    using PlaySharp.Toolkit.Helper;
    using PlaySharp.Toolkit.Logging;

    [SecuritySafeCritical]
    public abstract class BootstrapperBase<T> : Singleton<T>
        where T : class
    {
        private static readonly ILog Log = AssemblyLogs.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);

        public AggregateCatalog Catalog { get; private set; }

        public CompositionContainer Container { get; private set; }

        [Import(typeof(IEventAggregator))]
        public Lazy<IEventAggregator> EventAggregator { get; private set; }

        public bool IsInitialized { get; private set; }

        [SecuritySafeCritical]
        public virtual void BuildUp([NotNull] object instance)
        {
            Log.Debug(instance);
            this.Container.SatisfyImportsOnce(instance);
        }

        [SecuritySafeCritical]
        public virtual IEnumerable<object> GetAllInstances([NotNull] Type serviceType)
        {
            Log.Debug(serviceType);
            return this.Container.GetExportedValues<object>(AttributedModelServices.GetContractName(serviceType));
        }

        [SecuritySafeCritical]
        public virtual object GetInstance([NotNull] Type serviceType, string key)
        {
            var contract = string.IsNullOrEmpty(key) ? AttributedModelServices.GetContractName(serviceType) : key;
            var exports = this.Container.GetExportedValues<object>(contract);

            Log.Debug(contract);

            if (exports.Any())
            {
                return exports.First();
            }

            throw new Exception($"Could not locate any instances of contract {contract}.");
        }

        [SecuritySafeCritical]
        public virtual void Initialize()
        {
            if (this.IsInitialized)
            {
                return;
            }

            Log.Debug($"Starting Framework Runtime.");

            this.IsInitialized = true;

            this.Configure();

            if (Game.Mode == GameMode.Running)
            {
                this.OnStartup(EventArgs.Empty);
            }
            else
            {
                Game.OnStart += this.OnStartup;
            }

            Log.Debug($"Runtime startup Completed.");
        }

        [SecuritySafeCritical]
        private void Configure()
        {
            Log.Debug($"Configure");

            AppDomain.CurrentDomain.DomainUnload += this.OnExit;
            AppDomain.CurrentDomain.UnhandledException += this.OnUnhandledException;

            Log.Debug(this.GetType());

            this.Catalog = new AggregateCatalog();
            this.Catalog.Catalogs.Add(new AssemblyCatalog(Assembly.GetExecutingAssembly()));
            this.Catalog.Catalogs.Add(new AssemblyCatalog(typeof(IEventAggregator).Assembly));

            this.Container = new CompositionContainer(this.Catalog, CompositionOptions.DisableSilentRejection);
            this.Container.ComposeParts(this);
            this.Container.ComposeExportedValue(this.Container);

            IoC.GetInstance = this.GetInstance;
            IoC.GetAllInstances = this.GetAllInstances;
            IoC.BuildUp = this.BuildUp;

            this.EventAggregator.Value.Subscribe(this);
            this.EventAggregator.Value.PublishOnCurrentThread(new OnConfigure(this.Container));
        }

        [SecuritySafeCritical]
        private void OnExit(object sender, EventArgs eventArgs)
        {
            Log.Debug($"OnExit");
            this.EventAggregator.Value.PublishOnCurrentThread(new OnExit());
            this.Container.Dispose();
        }

        [SecuritySafeCritical]
        private void OnStartup(EventArgs args)
        {
            Log.Debug($"OnStartup");
            this.EventAggregator.Value.PublishOnCurrentThread(new OnStartup());
        }

        [SecuritySafeCritical]
        private void OnUnhandledException(object sender, UnhandledExceptionEventArgs args)
        {
            if (args.IsTerminating)
            {
                Log.Fatal(args.ExceptionObject);
            }
            else
            {
                Log.Error(args.ExceptionObject);
            }
        }
    }
}