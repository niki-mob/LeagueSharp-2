// --------------------------------------------------------------------------------------------------------------------
// <copyright file="CommonOrbwalker.cs" company="TwitchExploit">
//     Copyright (c) TwitchExploit. All rights reserved.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------
namespace TwitchExploit.Wrappers.Orbwalker.Common
{
    using System.Reflection;
    using System.Security;

    using LeagueSharp;
    using LeagueSharp.Common;

    using log4net;

    using PlaySharp.Toolkit.Helper;
    using PlaySharp.Toolkit.Logging;

    using SharpDX;

    [SecuritySafeCritical]
    [ExportWrapper(typeof(IOrbwalker), TargetFramework.Common)]
    public class CommonOrbwalker : IOrbwalker
    {
        private static readonly ILog Log = Logs.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);

        public OrbwalkingMode ActiveMode
        {
            [SecuritySafeCritical]
            get
            {
                switch (this.Orbwalker.ActiveMode)
                {
                    case Orbwalking.OrbwalkingMode.Combo:
                        return OrbwalkingMode.Combo;

                    case Orbwalking.OrbwalkingMode.CustomMode:
                        return OrbwalkingMode.CustomMode;

                    case Orbwalking.OrbwalkingMode.Freeze:
                        return OrbwalkingMode.Freeze;

                    case Orbwalking.OrbwalkingMode.LaneClear:
                        return OrbwalkingMode.LaneClear;

                    case Orbwalking.OrbwalkingMode.LastHit:
                        return OrbwalkingMode.LastHit;

                    default:
                        return OrbwalkingMode.None;
                }
            }

            [SecuritySafeCritical]
            set
            {
                switch (value)
                {
                    case OrbwalkingMode.Combo:
                        this.Orbwalker.ActiveMode = Orbwalking.OrbwalkingMode.Combo;
                        break;

                    case OrbwalkingMode.CustomMode:
                        this.Orbwalker.ActiveMode = Orbwalking.OrbwalkingMode.CustomMode;
                        break;

                    case OrbwalkingMode.Freeze:
                        this.Orbwalker.ActiveMode = Orbwalking.OrbwalkingMode.Freeze;
                        break;

                    case OrbwalkingMode.LaneClear:
                        this.Orbwalker.ActiveMode = Orbwalking.OrbwalkingMode.LaneClear;
                        break;

                    case OrbwalkingMode.LastHit:
                        this.Orbwalker.ActiveMode = Orbwalking.OrbwalkingMode.LastHit;
                        break;

                    default:
                        this.Orbwalker.ActiveMode = Orbwalking.OrbwalkingMode.None;
                        break;
                }
            }
        }

        public bool IsActive { [SecuritySafeCritical] get; [SecuritySafeCritical] private set; }

        public Orbwalking.Orbwalker Orbwalker { [SecuritySafeCritical] get; [SecuritySafeCritical] set; }

        public Menu OrbwalkerMenu { [SecuritySafeCritical] get; [SecuritySafeCritical] set; }

        [SecuritySafeCritical]
        public void Activate()
        {
            if (this.IsActive)
            {
                return;
            }

            Log.Debug($"Activate");
            this.IsActive = true;

            this.OrbwalkerMenu = IoC.Get<Menu>("PlaySharp").SubMenu("Orbwalker");
            this.Orbwalker = new Orbwalking.Orbwalker(this.OrbwalkerMenu);
        }

        [SecuritySafeCritical]
        public void Deactivate()
        {
            if (!this.IsActive)
            {
                return;
            }

            Log.Debug($"Deactivate");
            this.IsActive = false;
            this.Orbwalker.Dispose();
        }

        [SecuritySafeCritical]
        public void ForceTarget(Obj_AI_Base target)
        {
            this.Orbwalker.ForceTarget(target);
        }

        [SecuritySafeCritical]
        public AttackableUnit GetTarget()
        {
            return this.Orbwalker.GetTarget();
        }

        [SecuritySafeCritical]
        public bool InAutoAttackRange(AttackableUnit target)
        {
            return this.Orbwalker.InAutoAttackRange(target);
        }

        [SecuritySafeCritical]
        public void SetAttack(bool b)
        {
            this.Orbwalker.SetAttack(b);
        }

        [SecuritySafeCritical]
        public void SetMovement(bool b)
        {
            this.Orbwalker.SetMovement(b);
        }

        [SecuritySafeCritical]
        public void SetOrbwalkingPoint(Vector3 point)
        {
            this.Orbwalker.SetOrbwalkingPoint(point);
        }
    }
}